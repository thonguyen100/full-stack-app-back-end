name: build-docker-push-image-deploy-database

on:
  push:
    branches: [ main, staging ]

jobs:
  build-docker-push-image-deploy-database:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Authenticate to GCP using Workload Identity Federation
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{secrets.STG_WORKLOAD_IDENTITY_PROVIDER}}
          service_account: ${{secrets.STG_SERVICE_ACCOUNT}}

      - name: Get Github Actions variables from Secret Manager
        run: |
          IMAGE_NAME=$(gcloud secrets versions access latest --secret="stg-artifact-registry-image-path")
          IMAGE_TAG=${GITHUB_SHA::5}

          CLOUD_RUN_SERVICE_NAME=$(gcloud secrets versions access latest --secret="stg-cloud-run-service-name")

          CONNECTION_NAME=$(gcloud secrets versions access latest --secret="stg-db-instance-connection")

          DB_NAME=$(gcloud secrets versions access latest --secret="stg-app-db-name")
          DB_USER=$(gcloud secrets versions access latest --secret="stg-db-user-name")
          DB_PASSWORD=$(gcloud secrets versions access latest --secret="stg-db-user-password")
          {
            echo "IMAGE_NAME=$IMAGE_NAME"
            echo "IMAGE_TAG=$IMAGE_TAG"
            echo "CLOUD_RUN_SERVICE_NAME=$CLOUD_RUN_SERVICE_NAME"
            echo "CONNECTION_NAME=$CONNECTION_NAME"
            echo "DB_NAME=$DB_NAME"
            echo "DB_USER=$DB_USER"
            echo "DB_PASSWORD=$DB_PASSWORD"

          } >> $GITHUB_ENV
        
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker to use gcloud auth
        run: |
          gcloud auth configure-docker asia-east1-docker.pkg.dev

      - name: Build and push Docker image to Artifact Registry
        run: |
          IMAGE_NAME=$IMAGE_NAME

          docker build -t $IMAGE_NAME:$IMAGE_TAG -t $IMAGE_NAME:latest .
          docker push $IMAGE_NAME:$IMAGE_TAG
          docker push $IMAGE_NAME:latest

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $CLOUD_RUN_SERVICE_NAME \
            --image $IMAGE_NAME:$IMAGE_TAG \
            --region asia-east1 \
            --platform managed \
            --allow-unauthenticated \
            --project=peak-nimbus-466309-n1
      
      - name: Get schema.sql file from Cloud Storage
        run: |
          gsutil cp gs://stg-web-app-bucket/schema.sql .
  
      - name: Install MySQL client and Cloud SQL Auth Proxy
        run: |
          sudo apt-get update && sudo apt-get install -y mysql-client
          curl -o cloud-sql-proxy https://dl.google.com/cloudsql/cloud-sql-proxy.linux.amd64
          chmod +x cloud-sql-proxy

      - name: Start Cloud SQL Auth Proxy
        run: |
          ./cloud-sql-proxy "peak-nimbus-466309-n1:asia-east1:stg-app-db-instance" --port 3306 > proxy.log 2>&1 & sleep 5

      - name: Check if MySQL is listening
        run: |
          sudo apt-get update
          sudo apt install -y netcat-openbsd
          nc -zv 127.0.0.1 3306 || echo "Port 3306 is not open"

      - name: Print Proxy Logs
        run: cat proxy.log
    
      - name: Apply schema to Cloud SQL (MySQL)
        run: |
          mysql -u"$DB_USER" -p"$DB_PASSWORD" -h 127.0.0.1 -P 3306 "$DB_NAME" < schema.sql



